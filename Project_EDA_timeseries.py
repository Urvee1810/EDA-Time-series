# -*- coding: utf-8 -*-
"""GitHub_EDA_Timeseries.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lDEbv2_1-U77BLGI4W2_On5DleVzn8gX

### Dataset :
The dataset is a French retail company quarterly sales data that has been made available from  Prof. Rob Hyndman's ["Forecasting Methods & Applications"](https://robjhyndman.com/forecasting/) book. There are 24 entries, from 2012-03-31 to 2017-12-31 (Quarterly sales values).
"""

#Download Dataset
!wget -qq https:// #load your dataset

"""### Importing libraries

"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy
from pandas.plotting import lag_plot
from statsmodels.graphics.tsaplots import month_plot, seasonal_plot, quarter_plot
from statsmodels.tsa.seasonal import seasonal_decompose
from scipy import signal

import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline
np.random.seed(42)

"""### Import the Data"""

# Read dataset with 'Date' as index
df = pd.read_csv('ts_frenchretail.csv', parse_dates=['Date'], index_col='Date')
print(df.shape)
df.head()

"""## Exploratory Data Analysis

#### Divide the sales by 1000

Sales numbers are in thousands, so divide by 1000 to make it easier to work with numbers
"""

df['Sales'] = df["Sales"] / 1000
df.head()

df.isna().sum() #check for missing values

"""### **Visualization**

#### Visualize the time series (2012 to 2017)
"""

# Define function to plot the time series
def plot_df(x, y, title="", xlabel='Date', ylabel='Sales', dpi=100):
    plt.figure(figsize=(12, 5), dpi=dpi)
    plt.plot(x, y, color='tab:red')
    plt.gca().set(title=title, xlabel=xlabel, ylabel=ylabel)
    plt.show()


plot_df(x=df.index, y=df["Sales"],
        title='Quarterly Sales Data')

"""#### Visualize the data year-wise and quarter-wise

"""

# Prepare data
df.reset_index(inplace=True)

df['year'] = [d.year for d in df["Date"]]
df['month_name'] = [d.month_name() for d in df["Date"]]
df['month'] = [d.month for d in df["Date"]]
# Extracting quarter
df['quarter'] = df['Date'].dt.quarter
years = df['year'].unique()

# Box plot to see distribution of sales in each year
# Visualize the yearly and monthly drug sales using box plot
fig, axes = plt.subplots(figsize=(12, 7), dpi=80)
sns.boxplot(x='year', y='Sales', data=df, ax=axes)

# Set title
axes.set_title('Year-wise Box Plot\n(The Trend)', fontsize=18)
plt.show()

# Create year-wise subplots to visualize the quarterly Sales per year
sns.boxplot(x='quarter', y='Sales',
            data=df.loc[~df.year.isin([2012, 2017]), :])

# Set title
axes.set_title('Quarter-wise Box Plot\n(The Seasonality)', fontsize=18)
plt.show()

# Percentage growth each year
print(df.shape)
df.head()

# Group the year and sum sales
yearly_sales = df.groupby('year')['Sales'].sum().reset_index()
yearly_sales

yearly_sales['prct_growth'] = yearly_sales['Sales'].pct_change()*100
yearly_sales.head()

"""#### Visualize the distribution of the Sales


"""

sns.histplot(data=df["Sales"])

"""#### Visualize Quarterly trends"""

df.head()

# Setting index back to date
df = df.set_index('Date')
quarter_plot(df["Sales"])

"""#### Visualize the distribution of Sales in each year within a single plot"""

print(df.shape)
df.head()

print(yearly_sales.shape)
yearly_sales.head()

# Distribution plot of each year
sns.histplot(data=yearly_sales["Sales"])

plt.figure(figsize=(10, 6))
for year in df['year'].unique():
    sns.histplot(df[df['year'] == year]['Sales'], label=year)
plt.xlabel('Sales (in thousands)')
plt.ylabel('Density')
plt.title('Distribution of Sales by Year')
plt.legend()
plt.show()

"""#### Visualize the patterns in time series - trend, seasonality, residuals

"""

# Applying seasonal decompose
# Setting index back to date
df = pd.read_csv('ts_frenchretail.csv', parse_dates=['Date'], index_col='Date')

# Applying seasonal decompose
result = seasonal_decompose(df, model='additive')

# Plotting trend, seasonality and both trend and seasonality in drug sales data
result.plot()
plt.show()

"""### **Detrending the time series**"""

# Using scipy: Subtract the line of best fit
detrended = signal.detrend(df["Sales"].values)
plt.plot(detrended)
plt.title('Quarterly Sales', fontsize=14)

# Decomposing time-series first
result_mul = seasonal_decompose(
    df['Sales'], model='multiplicative', extrapolate_trend='freq')
# Detrending the time-series by trend component
detrended = df["Sales"].values - result_mul.trend

# Plotting the detrended time series
plt.plot(detrended)
plt.title('Quarterly Sales detrended by subtracting the trend component', fontsize=15)

# Time Series Decomposition
result_mul = seasonal_decompose(
    df['Sales'], model='multiplicative', extrapolate_trend='freq')

# Deseasonalize the time series
deseasonalized = df.Sales.values / result_mul.seasonal

# Visualize deseasonalize tiem series
plt.plot(deseasonalized)
plt.title('Quarterly Sales Deseasonalized', fontsize=14)
plt.plot()

"""#### Visualize the Lag plots"""

# Visualize lag plots
fig, axes = plt.subplots(1, 4, figsize=(
    10, 3), sharex=True, sharey=True, dpi=100)
for i, ax in enumerate(axes.flatten()[:4]):
    lag_plot(df["Sales"], lag=i+1, ax=ax, c='firebrick')
    ax.set_title(f'Lag {str(i+1)}')

fig.suptitle("Lag Plots of Quarterly Sales", y=1.05)
plt.show()

"""### Report Analysis

**Data Overview**

Quarterly sales data from a French retail company
Time period: 2012-03-31 to 2017-12-31 (24 quarters)
Data frequency: Quarterly
Main variable: Sales (in thousands)


**Trend Analysis**

Overall upward trend in sales from 2012 to 2017
Year-over-year growth shows consistent positive progression
Sales values have been steadily increasing across the years
The trend component from decomposition confirms a clear upward trajectory


**Seasonal Patterns**

Strong quarterly seasonality present in the data
Clear repeating patterns across years
Quarter-wise analysis shows:

Higher sales typically in Q4 (likely due to holiday season)
Lower sales generally in Q1 (post-holiday period)
Consistent seasonal pattern maintains throughout the years

**Distribution Characteristics**

Sales distribution shows slight positive skewness
Year-wise distributions reveal:

Increasing median sales values over years
Wider spread in later years indicating more variability
Each year's distribution maintains similar shape despite increasing values

**Time Series Components**

*Through decomposition analysis*

**Trend:** Strong upward trend

**Seasonality:** Consistent quarterly patterns

**Residuals:**
- Relatively small compared to trend and seasonal components
- Multiplicative decomposition shows better fit than additive


**Lag Analysis:**
- Strong positive autocorrelation at lag 1
- Decreasing correlation strength as lag increases
- Suggests good predictability for short-term forecasting


**Data Quality:**
- No missing values
- Consistent quarterly recordings
- No obvious outliers or anomalies


**Business Insights:**
- Business shows healthy growth over the period
- Consistent seasonal patterns suggest predictable business cycles
- Increasing variability in later years might indicate market expansion or increased market volatility

This time series demonstrates a healthy, growing retail business with clear seasonal patterns and a strong upward trend, making it suitable for forecasting and business planning purposes.
"""
